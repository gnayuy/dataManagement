
#
SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake ${CMAKE_MODULE_PATH})

# sources
SET( datamanagement_sources

# header files
    ${PROJECT_SOURCE_DIR}/src/dataio.h
    ${PROJECT_SOURCE_DIR}/src/datamanagement.h

# source files
    ${PROJECT_SOURCE_DIR}/src/dataio.cpp
    ${PROJECT_SOURCE_DIR}/src/datamanagement.cpp
)

# libcurl
FIND_PACKAGE( CURL REQUIRED)
IF(CURL_FOUND)
    SET(CMAKE_REQUIRED_LIBRARIES ${CURL_LIBRARIES})
    INCLUDE_DIRECTORIES(${CURL_INCLUDE_DIR})
ENDIF(CURL_FOUND)

# gflags
FIND_PACKAGE( GFlags REQUIRED)
IF(GFLAGS_FOUND)
    SET(CMAKE_REQUIRED_LIBRARIES ${GFLAGS_LIBRARIES})
    INCLUDE_DIRECTORIES(${GFLAGS_INCLUDE_DIR})
ENDIF(GFLAGS_FOUND)

# libtiff
FIND_PACKAGE( TIFF REQUIRED)
IF(TIFF_FOUND)
    INCLUDE(CheckFunctionExists) 
    SET(CMAKE_REQUIRED_LIBRARIES ${TIFF_LIBRARIES})

    CHECK_FUNCTION_EXISTS(TIFFOpen HAVE_TIFFOPEN)
    IF(NOT HAVE_TIFFOPEN)
        SET(TIFF_FOUND)
    ENDIF()
    
    INCLUDE_DIRECTORIES(${TIFF_INCLUDE_DIR})
    ADD_DEFINITIONS(-DHAVE_TIFF=1)
ENDIF(TIFF_FOUND)


#
IF(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
SET(CMAKE_CXX_FLAGS "-std=c++11 -O3 -lm -fopenmp" CACHE STRING "CXX Compiler Flags" FORCE)
ADD_DEFINITIONS(-DUse_OpenMP)
ENDIF()

IF(${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")
SET(CMAKE_CXX_FLAGS "-std=c++11 -O3" CACHE STRING "CXX Compiler Flags" FORCE)
SET(CMAKE_MACOSX_RPATH 1)
ENDIF()

#
ADD_EXECUTABLE(datamanagement ${datamanagement_sources})
TARGET_LINK_LIBRARIES(datamanagement ${CURL_LIBRARIES} ${TIFF_LIBRARIES} ${GFLAGS_LIBRARIES})

